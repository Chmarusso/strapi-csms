input createMenuitemInput {
  data: MenuitemInput
}

type createMenuitemPayload {
  menuitem: Menuitem
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVenueInput {
  data: VenueInput
}

type createVenuePayload {
  venue: Venue
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteMenuitemInput {
  where: InputID
}

type deleteMenuitemPayload {
  menuitem: Menuitem
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVenueInput {
  where: InputID
}

type deleteVenuePayload {
  venue: Venue
}

enum ENUM_MENUITEM_CATEGORY {
  main
  extension
  drink
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Menuitem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  category: ENUM_MENUITEM_CATEGORY
  description: String
  price: Int
  position: Int
  venue: Venue
}

input MenuitemInput {
  title: String
  category: ENUM_MENUITEM_CATEGORY
  description: String
  price: Int
  position: Int
  venue: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Menuitem | createMenuitemPayload | updateMenuitemPayload | deleteMenuitemPayload | Venue | createVenuePayload | updateVenuePayload | deleteVenuePayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createMenuitem(input: createMenuitemInput): createMenuitemPayload
  updateMenuitem(input: updateMenuitemInput): updateMenuitemPayload
  deleteMenuitem(input: deleteMenuitemInput): deleteMenuitemPayload
  createVenue(input: createVenueInput): createVenuePayload
  updateVenue(input: updateVenueInput): updateVenuePayload
  deleteVenue(input: deleteVenueInput): deleteVenuePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  menuitem(id: ID!): Menuitem
  menuitems(sort: String, limit: Int, start: Int, where: JSON): [Menuitem]
  venue(id: ID!): Venue
  venues(sort: String, limit: Int, start: Int, where: JSON): [Venue]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateMenuitemInput {
  where: InputID
  data: MenuitemInput
}

type updateMenuitemPayload {
  menuitem: Menuitem
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVenueInput {
  where: InputID
  data: VenueInput
}

type updateVenuePayload {
  venue: Venue
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type Venue {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  telephone: String
  menuitems(sort: String, limit: Int, start: Int, where: JSON): [Menuitem]
}

input VenueInput {
  title: String
  telephone: String
  menuitems: [ID]
}
